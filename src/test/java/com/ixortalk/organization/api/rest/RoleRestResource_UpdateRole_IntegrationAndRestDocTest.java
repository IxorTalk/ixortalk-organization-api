/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2016-present IxorTalk CVBA
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.ixortalk.organization.api.rest;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.ixortalk.organization.api.config.TestConstants;
import com.ixortalk.organization.api.AbstractSpringIntegrationTest;
import com.ixortalk.organization.api.domain.Role;
import org.junit.Test;
import org.springframework.restdocs.payload.RequestFieldsSnippet;

import javax.inject.Inject;
import java.io.IOException;

import static com.ixortalk.organization.api.config.TestConstants.USER_IN_ORGANIZATION_X_ADMIN_ROLE_JWT_TOKEN;
import static com.ixortalk.test.util.Randomizer.nextString;
import static io.restassured.RestAssured.given;
import static io.restassured.http.ContentType.JSON;
import static java.net.HttpURLConnection.HTTP_FORBIDDEN;
import static java.net.HttpURLConnection.HTTP_OK;
import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.restdocs.headers.HeaderDocumentation.requestHeaders;
import static org.springframework.restdocs.operation.preprocess.Preprocessors.*;
import static org.springframework.restdocs.payload.JsonFieldType.NUMBER;
import static org.springframework.restdocs.payload.JsonFieldType.STRING;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.requestFields;
import static org.springframework.restdocs.restassured3.RestAssuredRestDocumentation.document;
import static org.springframework.test.util.ReflectionTestUtils.setField;

public class RoleRestResource_UpdateRole_IntegrationAndRestDocTest extends AbstractSpringIntegrationTest {

    private static final String NEW_ROLE = nextString("newRole");

    private static final RequestFieldsSnippet REQUEST_FIELDS_SNIPPET = requestFields(
            fieldWithPath("name").type(STRING).description("The name for the role to add, this is a pure functional name, the technical role name will be generated by the backend."),
            fieldWithPath("id").type(NUMBER).description("The id of the role."),
            fieldWithPath("role").type(STRING).description("The technical name of the role (read-only).  Should not be visible to end users.")
    );

    @Inject
    protected RoleRestResource roleRestResource;

    @Test
    public void updateRoleAsAdmin() throws IOException {

        setField(firstRoleInOrganizationX, "name", NEW_ROLE);

        given()
                .auth().preemptive().oauth2(TestConstants.ADMIN_JWT_TOKEN)
                .filter(
                        document("organizations/update-role/as-admin",
                                preprocessRequest(staticUris(), prettyPrint()),
                                preprocessResponse(prettyPrint()),
                                requestHeaders(describeAuthorizationTokenHeader()),
                                REQUEST_FIELDS_SNIPPET
                        )
                )
                .contentType(JSON)
                .body(objectMapper.writeValueAsString(firstRoleInOrganizationX))
                .when()
                .put("/roles/{id}", firstRoleInOrganizationX.getId())
                .then()
                .statusCode(HTTP_OK);

        assertThat(roleRestResource.findById(firstRoleInOrganizationX.getId())).get().extracting(Role::getName).isEqualTo(NEW_ROLE);

    }

    @Test
    public void updateRoleAsAdminFromOrganizationX() throws IOException {

        setField(firstRoleInOrganizationX, "name", NEW_ROLE);

        given()
                .auth().preemptive().oauth2(USER_IN_ORGANIZATION_X_ADMIN_ROLE_JWT_TOKEN)
                .filter(
                        document("organizations/update-role/as-admin-from-organization-x",
                                preprocessRequest(staticUris(), prettyPrint()),
                                preprocessResponse(prettyPrint()),
                                requestHeaders(describeAuthorizationTokenHeader()),
                                REQUEST_FIELDS_SNIPPET                        )
                )
                .contentType(JSON)
                .body(objectMapper.writeValueAsString(firstRoleInOrganizationX))
                .when()
                .put("/roles/{id}", firstRoleInOrganizationX.getId())
                .then()
                .statusCode(HTTP_OK);

        assertThat(roleRestResource.findById(firstRoleInOrganizationX.getId())).get().extracting(Role::getName).isEqualTo(NEW_ROLE);

    }


    @Test
    public void updateRoleAsAdminFromOrganizationY() throws IOException {

        setField(firstRoleInOrganizationX, "name", NEW_ROLE);

        given()
                .auth().preemptive().oauth2(TestConstants.USER_IN_ORGANIZATION_Y_ADMIN_ROLE_JWT_TOKEN)
                .filter(
                        document("organizations/update-role/as-admin-from-organization-y",
                                preprocessRequest(staticUris(), prettyPrint()),
                                preprocessResponse(prettyPrint()),
                                requestHeaders(describeAuthorizationTokenHeader()),
                                REQUEST_FIELDS_SNIPPET                        )
                )
                .contentType(JSON)
                .body(objectMapper.writeValueAsString(firstRoleInOrganizationX))
                .when()
                .put("/roles/{id}", firstRoleInOrganizationX.getId())
                .then()
                .statusCode(HTTP_FORBIDDEN);

        assertThat(roleRestResource.findById(firstRoleInOrganizationX.getId())).get().extracting(Role::getName).isEqualTo(FIRST_ROLE_IN_ORGANIZATION_X);

    }

    @Test
    public void roleNameCannotBeUpdated() throws IOException {

        JsonNode jsonNode = objectMapper.valueToTree(firstRoleInOrganizationX);
        ((ObjectNode) jsonNode).put("role", TestConstants.Role.ORGANIZATION_Y_ADMIN.roleName());

        given()
                .auth().preemptive().oauth2(TestConstants.ADMIN_JWT_TOKEN)
                .contentType(JSON)
                .body(objectMapper.writeValueAsString(jsonNode))
                .when()
                .put("/roles/{id}", firstRoleInOrganizationX.getId())
                .then()
                .statusCode(HTTP_OK);

        assertThat(roleRestResource.findById(firstRoleInOrganizationX.getId())).get().extracting(Role::getRole).isEqualTo(FIRST_ROLE_IN_ORGANIZATION_X_ROLE_NAME);
    }

}
